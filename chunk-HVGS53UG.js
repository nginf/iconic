import{a as b}from"./chunk-ZGGWEWB5.js";import{d as v}from"./chunk-YDR6E2JK.js";import{$a as s,$b as y,Ca as r,Pb as E,Qa as d,X as l,ac as S,cb as p,db as u,eb as h,fb as i,gb as t,hb as g,wb as e,xb as x,yb as f,za as c}from"./chunk-YLC6IMWT.js";import"./chunk-EQDQRRRY.js";function I(n,w){if(n&1&&(i(0,"a",6),g(1,"img",7),i(2,"p",8),e(3),t()()),n&2){let o=w.$implicit;s("routerLink",o.path),r(),s("src",o.logo,c)("alt",o.name+" logo"),r(2),f(" ",o.name," ")}}var j=(()=>{class n{constructor(){this.iconLibraries=b,this.title=l(S),this.meta=l(y),this.document=l(E),this.usageCode=`
  import { ChevronDownIcon } from '@nginf/iconic-lu';

  @Component({
     imports:[ChevronDownIcon],
     template:' <chevron-down-icon> </chevron-down-icon> '
  })
  export class SomeComponent{}
  `,this.title.setTitle("@nginf/iconic"),this.meta.addTags([{property:"og:title",content:"@nginf/iconic"},{property:"og:description",content:"Introduction page of @Nginf/iconic"},{property:"og:image",content:"https://nginf.github.io/iconic/logo.png"},{property:"og:image:alt",content:"@nginf/iconic logo"},{property:"og:url",content:this.document.location.href},{property:"og:type",content:"website"}])}static{this.\u0275fac=function(a){return new(a||n)}}static{this.\u0275cmp=d({type:n,selectors:[["app-introduction-page"]],decls:110,vars:1,consts:[[1,"prose","prose-lg","max-w-[896px]","pt-8"],[1,"font-medium"],[1,"font-bold"],[1,"block","overflow-x-auto","whitespace-pre-wrap","break-words"],[1,"not-prose"],[1,"flex","flex-col","gap-6"],[1,"rounded-md","shadow-md","px-3","py-4","gap-4","flex","hover:bg-slate-100","items-center","bg-slate-50","w-full",3,"routerLink"],["width","30","height","30",3,"src","alt"],[1,"font-medium","text-2xl","text-center"]],template:function(a,m){a&1&&(i(0,"article",0)(1,"h1"),e(2,"Introduction"),t(),i(3,"p")(4,"code"),e(5,"@nginf/iconic"),t(),e(6," ( "),i(7,"code"),e(8,"iconic"),t(),e(9," for short) is an Angular library that allows you to use open-source icons in your project. It has one major advantage over other Angular icon libraries\u2014you can use icons as regular components. "),t(),i(10,"h2"),e(11,"Overview"),t(),i(12,"p"),e(13,"Most icon libraries follow one of these approaches:"),t(),i(14,"ul")(15,"li"),e(16," A generic icon component is provided, and you pass the icon name as a string. "),t(),i(17,"li"),e(18," SVG files are placed in the public folder and registered by name using a registration service. "),t(),i(19,"li"),e(20," A generic icon component is used, but instead of passing the name, you provide an SVG reference. "),t()(),i(21,"p"),e(22," In our opinion, the best way to use icons in your project is to treat them as regular components, just like any other component. This approach has several advantages: "),t(),i(23,"ul")(24,"li")(25,"strong"),e(26,"Ease of use"),t(),e(27," \u2013 Icons are used like standard Angular components. "),t(),i(28,"li")(29,"strong"),e(30,"Full IntelliSense support"),t(),e(31," \u2013 You get auto-completion and type safety in your IDE. "),t(),i(32,"li")(33,"strong"),e(34,"No additional AJAX requests"),t(),e(35," \u2013 Icons are loaded immediately, improving performance. "),t(),i(36,"li")(37,"strong"),e(38,"Everything in one place"),t(),e(39," \u2013 The SVG and component logic are not separated, keeping the project structured. "),t(),i(40,"li")(41,"strong"),e(42,"Effective tree-shaking"),t(),e(43," \u2013 Unused icons are removed during the build process, reducing bundle size. "),t()(),i(44,"p"),e(45," Iconic provides this functionality by compiling popular open-source icon libraries into small, optimized, and fully functional Angular components. This means you only import the icons you need. "),t(),i(46,"p",1),e(47," Keep in mind that Iconic does not provide its own crafted icons; instead, it utilizes open-source free icons. "),t(),i(48,"h2"),e(49,"Installation"),t(),i(50,"p",2),e(51,"Min Angular version is v17"),t(),i(52,"p"),e(53," There is no single global installation command like "),i(54,"code"),e(55,"npm install iconic"),t(),e(56,". Instead, each icon library has its own installation package, allowing you to install only the icon library you need. "),t(),i(57,"p"),e(58,"For example, to install the Lucide icon library, run:"),t(),i(59,"pre")(60,"code"),e(61,"npm install @nginf/iconic-lu"),t()(),i(62,"p"),e(63,"And you are good to go!"),t(),i(64,"p"),e(65,"(See the documentation for each icon library for more details.)"),t(),i(66,"h2"),e(67,"Usage"),t(),i(68,"p"),e(69," The usage pattern is the same across all icon libraries. First, you need to import the appropriate icon and then use it inside your template. "),t(),i(70,"p"),e(71," For example, to use the "),i(72,"code"),e(73,"ChevronDown"),t(),e(74," icon from Lucide, your code would look like this: "),t(),i(75,"pre",3),e(76,"    "),i(77,"code"),e(78),t(),e(79,`
  `),t(),i(80,"ul")(81,"li"),e(82," Icon class names always have the "),i(83,"code"),e(84,"Icon"),t(),e(85," suffix. "),t(),i(86,"li"),e(87," Icon selectors always have the "),i(88,"code"),e(89,"icon"),t(),e(90," suffix. "),t(),i(91,"li"),e(92," Rarely, Some icon names start with a number, which is not a valid class name or selector. In such cases, a library-specific prefix is added. For example, in Font Awesome, the "),i(93,"code"),e(94,"0.svg"),t(),e(95," icon would be generated as the "),i(96,"code"),e(97,"fa0Icon"),t(),e(98," component with the selector "),i(99,"code"),e(100,"fa-0-icon"),t(),e(101," . "),t()(),i(102,"p"),e(103," Each icon library has its own unique prefix for components. Some libraries may also provide additional input properties, which are documented in their respective API sections. "),t(),i(104,"h2"),e(105,"Get Started"),t(),i(106,"div",4)(107,"div",5),u(108,I,4,4,"a",6,p),t()()()),a&2&&(r(78),x(m.usageCode),r(30),h(m.iconLibraries))},dependencies:[v],encapsulation:2})}}return n})();export{j as IntroductionPageComponent};
